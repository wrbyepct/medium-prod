name: Deploy

on:
  push:
    branches: [main, prod]

jobs:
  test-lint:
    uses: ./.github/workflows/test-and-lint.yml
    secrets:
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      JWT_SIGNING_KEY: ${{ secrets.JWT_SIGNING_KEY }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

  deploy:
    runs-on: ubuntu-latest
    needs: [test-lint]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set Working Space Variables
        run: |
          if [$GITHUB_REF == 'refs/heads/prod' ]; then
            echo "prod" > .workspace
          else 
            echo "main" > .workspace
          fi 
      - name: Push to ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com
          
          docker build -f ./docker/prod/django/Dockerfile --compress -t ${{ vars.ECR_REPO_APP }}:$GITHUB_SHA ./
          docker push ${{ vars.ECR_REPO_APP }}:$GITHUB_SHA
          docker build --compress -t ${{ vars.ECR_REPO_PROXY }}:$GITHUB_SHA ./docker/prod/nginx
          docker push ${{ vars.ECR_REPO_PROXY }}:$GITHUB_SHA
      
      - name: Switch Workspace and Do Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_django_secret_key: ${{ secrets.DJANGO_SECRET_KEY }}
          TF_VAR_db_password: ${{ secrets.POSTGRES_PASSWORD }} 
        run: |
          export TF_VAR_ecr_repo_app_image="${{ vars.ECR_REPO_APP }}:$GITHUB_SHA"
          export TF_VAR_ecr_repo_proxy_image="${{ vars.ECR_REPO_PROXY }}:$GITHUB_SHA"
          workspace=$(cat .workspace)
          
          cd terraform
          docker compose -f tf.yml run --rm terrform -chdir=deploy init 
          docker compose -f tf.yml run --rm terrform -chdir=deploy workspace select -or-create $workspace
          docker compose -f tf.yml run --rm terrform -chdir=deploy apply -auto-approve




    
