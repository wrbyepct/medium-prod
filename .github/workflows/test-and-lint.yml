name: Test and Lint

on:
  workflow_call:
    secrets:
      DOCKERHUB_TOKEN:
        required: true
        description: Token to log in Docker Hub
      POSTGRES_PASSWORD:
        required: true
        description: Password for PostgreSQL
      POSTGRES_USER:
        required: true
        description: User for PostgreSQL
      JWT_SIGNING_KEY:
        required: true
        description: Signing key for JWT
      DJANGO_SECRET_KEY:
        required: true
        description: Secret key for Django



jobs:
  terraform-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Lint Terraform
        run: |
          /bin/bash -x run tf-lint:cd


  django-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11.4

      - name: Check pip cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/.pre-commit-config.yaml') }}
     
      - name: Install pre-commit
        run: |
          pip install pre-commit
    
      - name: Run lint ci
        run: |
          /bin/bash -x run lint:ci
  
  test:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{  vars.POSTGRES_HOST }}:${{ vars.POSTGRES_PORT }}/${{ vars.POSTGRES_DB }}
      DJANGO_SECRET_KEY: ${{ secrets.POSTGRES_USER }}
      JWT_SIGNING_KEY: ${{ secrets.JWT_SIGNING_KEY }}
      CELERY_BROKER: ${{ vars.CELERY_BROKER }}
      IN_GITHUB: true

    services:
      postgres:
        image: postgres:15-bullseye
        env:
          POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-retries 5
          --health-timeout 10s

      es:
        image: elasticsearch:8.17.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false      

    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PostgreSQL dependencies
        run: |
          apt-get update && apt-get install -y libpq-dev gcc
      
      - name: Install Python
        uses: actions/setup-python@v5
        with: 
          python-version: 3.11.4
  
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.7.1
          virtualenvs-path: .venv
          virtualenvs-in-project: true
          virtualenvs-create: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Run tests
        run: |
          /bin/bash -x run test:ci

         
